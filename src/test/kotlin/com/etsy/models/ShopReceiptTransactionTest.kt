/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.etsy.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.etsy.models.ShopReceiptTransaction
import com.etsy.models.ListingPropertyValue
import com.etsy.models.Money
import com.etsy.models.TransactionVariations

class ShopReceiptTransactionTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ShopReceiptTransaction
        //val modelInstance = ShopReceiptTransaction()

        // to test the property `transactionId` - The unique numeric ID for a transaction.
        should("test transactionId") {
            // uncomment below to test the property
            //modelInstance.transactionId shouldBe ("TODO")
        }

        // to test the property `title` - The title string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.
        should("test title") {
            // uncomment below to test the property
            //modelInstance.title shouldBe ("TODO")
        }

        // to test the property `description` - The description string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.
        should("test description") {
            // uncomment below to test the property
            //modelInstance.description shouldBe ("TODO")
        }

        // to test the property `sellerUserId` - The numeric user ID for the seller in this transaction.
        should("test sellerUserId") {
            // uncomment below to test the property
            //modelInstance.sellerUserId shouldBe ("TODO")
        }

        // to test the property `buyerUserId` - The numeric user ID for the buyer in this transaction.
        should("test buyerUserId") {
            // uncomment below to test the property
            //modelInstance.buyerUserId shouldBe ("TODO")
        }

        // to test the property `createTimestamp` - The transaction's creation date and time, in epoch seconds.
        should("test createTimestamp") {
            // uncomment below to test the property
            //modelInstance.createTimestamp shouldBe ("TODO")
        }

        // to test the property `createdTimestamp` - The transaction's creation date and time, in epoch seconds.
        should("test createdTimestamp") {
            // uncomment below to test the property
            //modelInstance.createdTimestamp shouldBe ("TODO")
        }

        // to test the property `paidTimestamp` - The transaction's paid date and time, in epoch seconds.
        should("test paidTimestamp") {
            // uncomment below to test the property
            //modelInstance.paidTimestamp shouldBe ("TODO")
        }

        // to test the property `shippedTimestamp` - The transaction's shipping date and time, in epoch seconds.
        should("test shippedTimestamp") {
            // uncomment below to test the property
            //modelInstance.shippedTimestamp shouldBe ("TODO")
        }

        // to test the property `quantity` - The numeric quantity of products purchased in this transaction.
        should("test quantity") {
            // uncomment below to test the property
            //modelInstance.quantity shouldBe ("TODO")
        }

        // to test the property `listingImageId` - The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
        should("test listingImageId") {
            // uncomment below to test the property
            //modelInstance.listingImageId shouldBe ("TODO")
        }

        // to test the property `receiptId` - The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
        should("test receiptId") {
            // uncomment below to test the property
            //modelInstance.receiptId shouldBe ("TODO")
        }

        // to test the property `isDigital` - When true, the transaction recorded the purchase of a digital listing.
        should("test isDigital") {
            // uncomment below to test the property
            //modelInstance.isDigital shouldBe ("TODO")
        }

        // to test the property `fileData` - A string describing the files purchased in this transaction.
        should("test fileData") {
            // uncomment below to test the property
            //modelInstance.fileData shouldBe ("TODO")
        }

        // to test the property `listingId` - The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
        should("test listingId") {
            // uncomment below to test the property
            //modelInstance.listingId shouldBe ("TODO")
        }

        // to test the property `transactionType` - The type string for the transaction, usually \"listing\".
        should("test transactionType") {
            // uncomment below to test the property
            //modelInstance.transactionType shouldBe ("TODO")
        }

        // to test the property `productId` - The numeric ID for a specific [product](/documentation/reference#tag/ShopListing-Product) purchased from a listing.
        should("test productId") {
            // uncomment below to test the property
            //modelInstance.productId shouldBe ("TODO")
        }

        // to test the property `sku` - The SKU string for the product
        should("test sku") {
            // uncomment below to test the property
            //modelInstance.sku shouldBe ("TODO")
        }

        // to test the property `price` - A money object representing the price recorded the transaction.
        should("test price") {
            // uncomment below to test the property
            //modelInstance.price shouldBe ("TODO")
        }

        // to test the property `shippingCost` - A money object representing the shipping cost for this transaction.
        should("test shippingCost") {
            // uncomment below to test the property
            //modelInstance.shippingCost shouldBe ("TODO")
        }

        // to test the property `variations` - Array of variations and personalizations the buyer chose.
        should("test variations") {
            // uncomment below to test the property
            //modelInstance.variations shouldBe ("TODO")
        }

        // to test the property `productData` - A list of property value entries for this product. Note: parenthesis characters (`(` and `)`) are not allowed.
        should("test productData") {
            // uncomment below to test the property
            //modelInstance.productData shouldBe ("TODO")
        }

        // to test the property `shippingProfileId` - The ID of the shipping profile selected for this listing.
        should("test shippingProfileId") {
            // uncomment below to test the property
            //modelInstance.shippingProfileId shouldBe ("TODO")
        }

        // to test the property `minProcessingDays` - The minimum number of days for processing the listing.
        should("test minProcessingDays") {
            // uncomment below to test the property
            //modelInstance.minProcessingDays shouldBe ("TODO")
        }

        // to test the property `maxProcessingDays` - The maximum number of days for processing the listing.
        should("test maxProcessingDays") {
            // uncomment below to test the property
            //modelInstance.maxProcessingDays shouldBe ("TODO")
        }

        // to test the property `shippingMethod` - Name of the selected shipping method.
        should("test shippingMethod") {
            // uncomment below to test the property
            //modelInstance.shippingMethod shouldBe ("TODO")
        }

        // to test the property `shippingUpgrade` - The name of the shipping upgrade selected for this listing. Default value is null.
        should("test shippingUpgrade") {
            // uncomment below to test the property
            //modelInstance.shippingUpgrade shouldBe ("TODO")
        }

        // to test the property `expectedShipDate` - The date & time of the expected ship date, in epoch seconds.
        should("test expectedShipDate") {
            // uncomment below to test the property
            //modelInstance.expectedShipDate shouldBe ("TODO")
        }

        // to test the property `buyerCoupon` - The amount of the buyer coupon that was discounted in the shop's currency.
        should("test buyerCoupon") {
            // uncomment below to test the property
            //modelInstance.buyerCoupon shouldBe ("TODO")
        }

        // to test the property `shopCoupon` - The amount of the shop coupon that was discounted in the shop's currency.
        should("test shopCoupon") {
            // uncomment below to test the property
            //modelInstance.shopCoupon shouldBe ("TODO")
        }

    }
}
