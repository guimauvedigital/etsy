/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.etsy.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.etsy.models.Shop

class ShopTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Shop
        //val modelInstance = Shop()

        // to test the property `shopId` - The unique positive non-zero numeric ID for an Etsy Shop.
        should("test shopId") {
            // uncomment below to test the property
            //modelInstance.shopId shouldBe ("TODO")
        }

        // to test the property `userId` - The numeric user ID of the [user](/documentation/reference#tag/User) who owns this shop.
        should("test userId") {
            // uncomment below to test the property
            //modelInstance.userId shouldBe ("TODO")
        }

        // to test the property `shopName` - The shop's name string.
        should("test shopName") {
            // uncomment below to test the property
            //modelInstance.shopName shouldBe ("TODO")
        }

        // to test the property `createDate` - The date and time this shop was created, in epoch seconds.
        should("test createDate") {
            // uncomment below to test the property
            //modelInstance.createDate shouldBe ("TODO")
        }

        // to test the property `createdTimestamp` - The date and time this shop was created, in epoch seconds.
        should("test createdTimestamp") {
            // uncomment below to test the property
            //modelInstance.createdTimestamp shouldBe ("TODO")
        }

        // to test the property `title` - A brief heading string for the shop's main page.
        should("test title") {
            // uncomment below to test the property
            //modelInstance.title shouldBe ("TODO")
        }

        // to test the property `announcement` - An announcement string to buyers that displays on the shop's homepage.
        should("test announcement") {
            // uncomment below to test the property
            //modelInstance.announcement shouldBe ("TODO")
        }

        // to test the property `currencyCode` - The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.
        should("test currencyCode") {
            // uncomment below to test the property
            //modelInstance.currencyCode shouldBe ("TODO")
        }

        // to test the property `isVacation` - When true, this shop is not accepting purchases.
        should("test isVacation") {
            // uncomment below to test the property
            //modelInstance.isVacation shouldBe ("TODO")
        }

        // to test the property `vacationMessage` - The shop's message string displayed when `is_vacation` is true.
        should("test vacationMessage") {
            // uncomment below to test the property
            //modelInstance.vacationMessage shouldBe ("TODO")
        }

        // to test the property `saleMessage` - A message string sent to users who complete a purchase from this shop.
        should("test saleMessage") {
            // uncomment below to test the property
            //modelInstance.saleMessage shouldBe ("TODO")
        }

        // to test the property `digitalSaleMessage` - A message string sent to users who purchase a digital item from this shop.
        should("test digitalSaleMessage") {
            // uncomment below to test the property
            //modelInstance.digitalSaleMessage shouldBe ("TODO")
        }

        // to test the property `updateDate` - The date and time of the last update to the shop, in epoch seconds.
        should("test updateDate") {
            // uncomment below to test the property
            //modelInstance.updateDate shouldBe ("TODO")
        }

        // to test the property `updatedTimestamp` - The date and time of the last update to the shop, in epoch seconds.
        should("test updatedTimestamp") {
            // uncomment below to test the property
            //modelInstance.updatedTimestamp shouldBe ("TODO")
        }

        // to test the property `listingActiveCount` - The number of active listings in the shop.
        should("test listingActiveCount") {
            // uncomment below to test the property
            //modelInstance.listingActiveCount shouldBe ("TODO")
        }

        // to test the property `digitalListingCount` - The number of digital listings in the shop.
        should("test digitalListingCount") {
            // uncomment below to test the property
            //modelInstance.digitalListingCount shouldBe ("TODO")
        }

        // to test the property `loginName` - The shop owner's login name string.
        should("test loginName") {
            // uncomment below to test the property
            //modelInstance.loginName shouldBe ("TODO")
        }

        // to test the property `acceptsCustomRequests` - When true, the shop accepts customization requests.
        should("test acceptsCustomRequests") {
            // uncomment below to test the property
            //modelInstance.acceptsCustomRequests shouldBe ("TODO")
        }

        // to test the property `policyWelcome` - The shop's policy welcome string (may be blank).
        should("test policyWelcome") {
            // uncomment below to test the property
            //modelInstance.policyWelcome shouldBe ("TODO")
        }

        // to test the property `policyPayment` - The shop's payment policy string (may be blank).
        should("test policyPayment") {
            // uncomment below to test the property
            //modelInstance.policyPayment shouldBe ("TODO")
        }

        // to test the property `policyShipping` - The shop's shipping policy string (may be blank).
        should("test policyShipping") {
            // uncomment below to test the property
            //modelInstance.policyShipping shouldBe ("TODO")
        }

        // to test the property `policyRefunds` - The shop's refund policy string (may be blank).
        should("test policyRefunds") {
            // uncomment below to test the property
            //modelInstance.policyRefunds shouldBe ("TODO")
        }

        // to test the property `policyAdditional` - The shop's additional policies string (may be blank).
        should("test policyAdditional") {
            // uncomment below to test the property
            //modelInstance.policyAdditional shouldBe ("TODO")
        }

        // to test the property `policySellerInfo` - The shop's seller information string (may be blank).
        should("test policySellerInfo") {
            // uncomment below to test the property
            //modelInstance.policySellerInfo shouldBe ("TODO")
        }

        // to test the property `policyUpdateDate` - The date and time of the last update to the shop's policies, in epoch seconds.
        should("test policyUpdateDate") {
            // uncomment below to test the property
            //modelInstance.policyUpdateDate shouldBe ("TODO")
        }

        // to test the property `policyHasPrivateReceiptInfo` - When true, EU receipts display private info.
        should("test policyHasPrivateReceiptInfo") {
            // uncomment below to test the property
            //modelInstance.policyHasPrivateReceiptInfo shouldBe ("TODO")
        }

        // to test the property `hasUnstructuredPolicies` - When true, the shop displays additional unstructured policy fields.
        should("test hasUnstructuredPolicies") {
            // uncomment below to test the property
            //modelInstance.hasUnstructuredPolicies shouldBe ("TODO")
        }

        // to test the property `policyPrivacy` - The shop's privacy policy string (may be blank).
        should("test policyPrivacy") {
            // uncomment below to test the property
            //modelInstance.policyPrivacy shouldBe ("TODO")
        }

        // to test the property `vacationAutoreply` - The shop's automatic reply string displayed in new conversations when `is_vacation` is true.
        should("test vacationAutoreply") {
            // uncomment below to test the property
            //modelInstance.vacationAutoreply shouldBe ("TODO")
        }

        // to test the property `url` - The URL string for this shop.
        should("test url") {
            // uncomment below to test the property
            //modelInstance.url shouldBe ("TODO")
        }

        // to test the property `imageUrl760x100` - The URL string for this shop's banner image.
        should("test imageUrl760x100") {
            // uncomment below to test the property
            //modelInstance.imageUrl760x100 shouldBe ("TODO")
        }

        // to test the property `numFavorers` - The number of users who marked this shop a favorite.
        should("test numFavorers") {
            // uncomment below to test the property
            //modelInstance.numFavorers shouldBe ("TODO")
        }

        // to test the property `languages` - A list of language strings for the shop's enrolled languages where the default shop language is the first element in the array.
        should("test languages") {
            // uncomment below to test the property
            //modelInstance.languages shouldBe ("TODO")
        }

        // to test the property `iconUrlFullxfull` - The URL string for this shop's icon image.
        should("test iconUrlFullxfull") {
            // uncomment below to test the property
            //modelInstance.iconUrlFullxfull shouldBe ("TODO")
        }

        // to test the property `isUsingStructuredPolicies` - When true, the shop accepted using structured policies.
        should("test isUsingStructuredPolicies") {
            // uncomment below to test the property
            //modelInstance.isUsingStructuredPolicies shouldBe ("TODO")
        }

        // to test the property `hasOnboardedStructuredPolicies` - When true, the shop accepted OR declined after viewing structured policies onboarding.
        should("test hasOnboardedStructuredPolicies") {
            // uncomment below to test the property
            //modelInstance.hasOnboardedStructuredPolicies shouldBe ("TODO")
        }

        // to test the property `includeDisputeFormLink` - When true, this shop's policies include a link to an EU online dispute form.
        should("test includeDisputeFormLink") {
            // uncomment below to test the property
            //modelInstance.includeDisputeFormLink shouldBe ("TODO")
        }

        // to test the property `isDirectCheckoutOnboarded` - (**DEPRECATED: Replaced by _is_etsy_payments_onboarded_.) When true, the shop has onboarded onto Etsy Payments.
        should("test isDirectCheckoutOnboarded") {
            // uncomment below to test the property
            //modelInstance.isDirectCheckoutOnboarded shouldBe ("TODO")
        }

        // to test the property `isEtsyPaymentsOnboarded` - When true, the shop has onboarded onto Etsy Payments.
        should("test isEtsyPaymentsOnboarded") {
            // uncomment below to test the property
            //modelInstance.isEtsyPaymentsOnboarded shouldBe ("TODO")
        }

        // to test the property `isCalculatedEligible` - When true, the shop is eligible for calculated shipping profiles. (Only available in the US and Canada)
        should("test isCalculatedEligible") {
            // uncomment below to test the property
            //modelInstance.isCalculatedEligible shouldBe ("TODO")
        }

        // to test the property `isOptedInToBuyerPromise` - When true, the shop opted in to buyer promise.
        should("test isOptedInToBuyerPromise") {
            // uncomment below to test the property
            //modelInstance.isOptedInToBuyerPromise shouldBe ("TODO")
        }

        // to test the property `isShopUsBased` - When true, the shop is based in the US.
        should("test isShopUsBased") {
            // uncomment below to test the property
            //modelInstance.isShopUsBased shouldBe ("TODO")
        }

        // to test the property `transactionSoldCount` - The total number of sales ([transactions](/documentation/reference#tag/Shop-Receipt-Transactions)) for this shop.
        should("test transactionSoldCount") {
            // uncomment below to test the property
            //modelInstance.transactionSoldCount shouldBe ("TODO")
        }

        // to test the property `shippingFromCountryIso` - The country iso the shop is shipping from.
        should("test shippingFromCountryIso") {
            // uncomment below to test the property
            //modelInstance.shippingFromCountryIso shouldBe ("TODO")
        }

        // to test the property `shopLocationCountryIso` - The country iso where the shop is located.
        should("test shopLocationCountryIso") {
            // uncomment below to test the property
            //modelInstance.shopLocationCountryIso shouldBe ("TODO")
        }

        // to test the property `reviewCount` - Number of reviews of shop listings in the past year.
        should("test reviewCount") {
            // uncomment below to test the property
            //modelInstance.reviewCount shouldBe ("TODO")
        }

        // to test the property `reviewAverage` - Average rating based on reviews of shop listings in the past year.
        should("test reviewAverage") {
            // uncomment below to test the property
            //modelInstance.reviewAverage shouldBe ("TODO")
        }

    }
}
