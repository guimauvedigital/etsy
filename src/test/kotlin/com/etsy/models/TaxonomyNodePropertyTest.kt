/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.etsy.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.etsy.models.TaxonomyNodeProperty
import com.etsy.models.TaxonomyPropertyScale
import com.etsy.models.TaxonomyPropertyValue

class TaxonomyNodePropertyTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of TaxonomyNodeProperty
        //val modelInstance = TaxonomyNodeProperty()

        // to test the property `propertyId` - The unique numeric ID of this product property.
        should("test propertyId") {
            // uncomment below to test the property
            //modelInstance.propertyId shouldBe ("TODO")
        }

        // to test the property `name` - The name string for this taxonomy node.
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `displayName` - The human-readable product property name string.
        should("test displayName") {
            // uncomment below to test the property
            //modelInstance.displayName shouldBe ("TODO")
        }

        // to test the property `scales` - A list of available scales.
        should("test scales") {
            // uncomment below to test the property
            //modelInstance.scales shouldBe ("TODO")
        }

        // to test the property `isRequired` - When true, listings assigned eligible taxonomy IDs require this property.
        should("test isRequired") {
            // uncomment below to test the property
            //modelInstance.isRequired shouldBe ("TODO")
        }

        // to test the property `supportsAttributes` - When true, you can use this property in listing attributes.
        should("test supportsAttributes") {
            // uncomment below to test the property
            //modelInstance.supportsAttributes shouldBe ("TODO")
        }

        // to test the property `supportsVariations` - When true, you can use this property in listing variations.
        should("test supportsVariations") {
            // uncomment below to test the property
            //modelInstance.supportsVariations shouldBe ("TODO")
        }

        // to test the property `isMultivalued` - When true, you can assign multiple property values to this property
        should("test isMultivalued") {
            // uncomment below to test the property
            //modelInstance.isMultivalued shouldBe ("TODO")
        }

        // to test the property `maxValuesAllowed` - When true, you can assign multiple property values to this property
        should("test maxValuesAllowed") {
            // uncomment below to test the property
            //modelInstance.maxValuesAllowed shouldBe ("TODO")
        }

        // to test the property `possibleValues` - A list of supported property value strings for this property.
        should("test possibleValues") {
            // uncomment below to test the property
            //modelInstance.possibleValues shouldBe ("TODO")
        }

        // to test the property `selectedValues` - A list of property value strings automatically and always selected for the given property.
        should("test selectedValues") {
            // uncomment below to test the property
            //modelInstance.selectedValues shouldBe ("TODO")
        }

    }
}
