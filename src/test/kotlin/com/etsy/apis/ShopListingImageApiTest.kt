/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.etsy.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.etsy.apis.ShopListingImageApi
import com.etsy.models.ErrorSchema
import com.etsy.models.ListingImage
import com.etsy.models.ListingImages

class ShopListingImageApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ShopListingImageApi
        //val apiInstance = ShopListingImageApi()

        // to test deleteListingImage
        should("test deleteListingImage") {
            // uncomment below to test deleteListingImage
            //val shopId : kotlin.Long = 789 // kotlin.Long | The unique positive non-zero numeric ID for an Etsy Shop.
            //val listingId : kotlin.Long = 789 // kotlin.Long | The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
            //val listingImageId : kotlin.Long = 789 // kotlin.Long | The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
            //apiInstance.deleteListingImage(shopId, listingId, listingImageId)
        }

        // to test getListingImage
        should("test getListingImage") {
            // uncomment below to test getListingImage
            //val listingId : kotlin.Long = 789 // kotlin.Long | The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
            //val listingImageId : kotlin.Long = 789 // kotlin.Long | The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
            //val result : ListingImage = apiInstance.getListingImage(listingId, listingImageId)
            //result shouldBe ("TODO")
        }

        // to test getListingImages
        should("test getListingImages") {
            // uncomment below to test getListingImages
            //val listingId : kotlin.Long = 789 // kotlin.Long | The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
            //val result : ListingImages = apiInstance.getListingImages(listingId)
            //result shouldBe ("TODO")
        }

        // to test uploadListingImage
        should("test uploadListingImage") {
            // uncomment below to test uploadListingImage
            //val shopId : kotlin.Long = 789 // kotlin.Long | The unique positive non-zero numeric ID for an Etsy Shop.
            //val listingId : kotlin.Long = 789 // kotlin.Long | The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
            //val image : io.ktor.client.request.forms.FormPart<io.ktor.client.request.forms.InputProvider> = BINARY_DATA_HERE // io.ktor.client.request.forms.FormPart<io.ktor.client.request.forms.InputProvider> | The file name string of a file to upload
            //val listingImageId : kotlin.Long = 789 // kotlin.Long | The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
            //val rank : kotlin.Int = 56 // kotlin.Int | The positive non-zero numeric position in the images displayed in a listing, with rank 1 images appearing in the left-most position in a listing.
            //val overwrite : kotlin.Boolean = true // kotlin.Boolean | When true, this request replaces the existing image at a given rank.
            //val isWatermarked : kotlin.Boolean = true // kotlin.Boolean | When true, indicates that the uploaded image has a watermark.
            //val altText : kotlin.String = altText_example // kotlin.String | Alt text for the listing image. Max length 500 characters.
            //val result : ListingImage = apiInstance.uploadListingImage(shopId, listingId, image, listingImageId, rank, overwrite, isWatermarked, altText)
            //result shouldBe ("TODO")
        }

    }
}
