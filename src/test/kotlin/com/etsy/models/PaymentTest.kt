/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.etsy.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.etsy.models.Payment
import com.etsy.models.Money
import com.etsy.models.PaymentAdjustment

class PaymentTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Payment
        //val modelInstance = Payment()

        // to test the property `paymentId` - A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).
        should("test paymentId") {
            // uncomment below to test the property
            //modelInstance.paymentId shouldBe ("TODO")
        }

        // to test the property `buyerUserId` - The numeric ID for the [user](/documentation/reference#tag/User) who paid the purchase.
        should("test buyerUserId") {
            // uncomment below to test the property
            //modelInstance.buyerUserId shouldBe ("TODO")
        }

        // to test the property `shopId` - The unique positive non-zero numeric ID for an Etsy Shop.
        should("test shopId") {
            // uncomment below to test the property
            //modelInstance.shopId shouldBe ("TODO")
        }

        // to test the property `receiptId` - The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
        should("test receiptId") {
            // uncomment below to test the property
            //modelInstance.receiptId shouldBe ("TODO")
        }

        // to test the property `amountGross` - An integer equal to gross amount of the order, in pennies, including shipping and taxes.
        should("test amountGross") {
            // uncomment below to test the property
            //modelInstance.amountGross shouldBe ("TODO")
        }

        // to test the property `amountFees` - An integer equal to the original card processing fee of the order in pennies.
        should("test amountFees") {
            // uncomment below to test the property
            //modelInstance.amountFees shouldBe ("TODO")
        }

        // to test the property `amountNet` - An integer equal to the payment value, in pennies, less fees (`amount_gross` - `amount_fees`).
        should("test amountNet") {
            // uncomment below to test the property
            //modelInstance.amountNet shouldBe ("TODO")
        }

        // to test the property `postedGross` - The total gross value of the payment posted once the purchase ships. This is equal to the `amount_gross` UNLESS the seller issues a refund prior to shipping. We consider \"shipping\" to be the event which \"posts\" to the ledger. Therefore, if the seller refunds first, we reduce the `amount_gross` first and post then that amount. The seller never sees the refunded amount in their ledger. This is equal to the \"Credit\" amount in the ledger entry.
        should("test postedGross") {
            // uncomment below to test the property
            //modelInstance.postedGross shouldBe ("TODO")
        }

        // to test the property `postedFees` - The total value of the fees posted once the purchase ships. Etsy refunds a proportional amount of the fees when a seller refunds a buyer. When the seller issues a refund prior to shipping, the posted amount is less then the original.
        should("test postedFees") {
            // uncomment below to test the property
            //modelInstance.postedFees shouldBe ("TODO")
        }

        // to test the property `postedNet` - The total value of the payment at the time of posting, less fees. (`posted_gross` - `posted_fees`)
        should("test postedNet") {
            // uncomment below to test the property
            //modelInstance.postedNet shouldBe ("TODO")
        }

        // to test the property `adjustedGross` - The gross payment amount after the seller refunds a payment, partially or fully.
        should("test adjustedGross") {
            // uncomment below to test the property
            //modelInstance.adjustedGross shouldBe ("TODO")
        }

        // to test the property `adjustedFees` - The new fee amount after a seller refunds a payment, partially or fully.
        should("test adjustedFees") {
            // uncomment below to test the property
            //modelInstance.adjustedFees shouldBe ("TODO")
        }

        // to test the property `adjustedNet` - The total value of the payment after refunds, less fees (`adjusted_gross` - `adjusted_fees`).
        should("test adjustedNet") {
            // uncomment below to test the property
            //modelInstance.adjustedNet shouldBe ("TODO")
        }

        // to test the property `currency` - The ISO (alphabetic) code string for the payment's currency.
        should("test currency") {
            // uncomment below to test the property
            //modelInstance.currency shouldBe ("TODO")
        }

        // to test the property `shopCurrency` - The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.
        should("test shopCurrency") {
            // uncomment below to test the property
            //modelInstance.shopCurrency shouldBe ("TODO")
        }

        // to test the property `buyerCurrency` - The currency string of the buyer.
        should("test buyerCurrency") {
            // uncomment below to test the property
            //modelInstance.buyerCurrency shouldBe ("TODO")
        }

        // to test the property `shippingUserId` - The numeric ID of the user to which the seller ships the order.
        should("test shippingUserId") {
            // uncomment below to test the property
            //modelInstance.shippingUserId shouldBe ("TODO")
        }

        // to test the property `shippingAddressId` - The numeric id identifying the shipping address.
        should("test shippingAddressId") {
            // uncomment below to test the property
            //modelInstance.shippingAddressId shouldBe ("TODO")
        }

        // to test the property `billingAddressId` - The numeric ID identifying the billing address of the buyer.
        should("test billingAddressId") {
            // uncomment below to test the property
            //modelInstance.billingAddressId shouldBe ("TODO")
        }

        // to test the property `status` - A string indicating the current status of the payment, most commonly \"settled\" or \"authed\".
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `shippedTimestamp` - The transaction's shipping date and time, in epoch seconds.
        should("test shippedTimestamp") {
            // uncomment below to test the property
            //modelInstance.shippedTimestamp shouldBe ("TODO")
        }

        // to test the property `createTimestamp` - The transaction's creation date and time, in epoch seconds.
        should("test createTimestamp") {
            // uncomment below to test the property
            //modelInstance.createTimestamp shouldBe ("TODO")
        }

        // to test the property `createdTimestamp` - The transaction's creation date and time, in epoch seconds.
        should("test createdTimestamp") {
            // uncomment below to test the property
            //modelInstance.createdTimestamp shouldBe ("TODO")
        }

        // to test the property `updateTimestamp` - The date and time of the last change to the payment adjustment in epoch seconds.
        should("test updateTimestamp") {
            // uncomment below to test the property
            //modelInstance.updateTimestamp shouldBe ("TODO")
        }

        // to test the property `updatedTimestamp` - The date and time of the last change to the payment adjustment in epoch seconds.
        should("test updatedTimestamp") {
            // uncomment below to test the property
            //modelInstance.updatedTimestamp shouldBe ("TODO")
        }

        // to test the property `paymentAdjustments` - List of refund objects on an Etsy Payments transaction. All monetary amounts are in USD pennies unless otherwise specified.
        should("test paymentAdjustments") {
            // uncomment below to test the property
            //modelInstance.paymentAdjustments shouldBe ("TODO")
        }

    }
}
