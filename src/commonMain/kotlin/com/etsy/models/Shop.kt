/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.etsy.models


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * A shop created by an Etsy user.
 *
 * @param shopId The unique positive non-zero numeric ID for an Etsy Shop.
 * @param userId The numeric user ID of the [user](/documentation/reference#tag/User) who owns this shop.
 * @param shopName The shop's name string.
 * @param createDate The date and time this shop was created, in epoch seconds.
 * @param createdTimestamp The date and time this shop was created, in epoch seconds.
 * @param title A brief heading string for the shop's main page.
 * @param announcement An announcement string to buyers that displays on the shop's homepage.
 * @param currencyCode The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.
 * @param isVacation When true, this shop is not accepting purchases.
 * @param vacationMessage The shop's message string displayed when `is_vacation` is true.
 * @param saleMessage A message string sent to users who complete a purchase from this shop.
 * @param digitalSaleMessage A message string sent to users who purchase a digital item from this shop.
 * @param updateDate The date and time of the last update to the shop, in epoch seconds.
 * @param updatedTimestamp The date and time of the last update to the shop, in epoch seconds.
 * @param listingActiveCount The number of active listings in the shop.
 * @param digitalListingCount The number of digital listings in the shop.
 * @param loginName The shop owner's login name string.
 * @param acceptsCustomRequests When true, the shop accepts customization requests.
 * @param policyWelcome The shop's policy welcome string (may be blank).
 * @param policyPayment The shop's payment policy string (may be blank).
 * @param policyShipping The shop's shipping policy string (may be blank).
 * @param policyRefunds The shop's refund policy string (may be blank).
 * @param policyAdditional The shop's additional policies string (may be blank).
 * @param policySellerInfo The shop's seller information string (may be blank).
 * @param policyUpdateDate The date and time of the last update to the shop's policies, in epoch seconds.
 * @param policyHasPrivateReceiptInfo When true, EU receipts display private info.
 * @param hasUnstructuredPolicies When true, the shop displays additional unstructured policy fields.
 * @param policyPrivacy The shop's privacy policy string (may be blank).
 * @param vacationAutoreply The shop's automatic reply string displayed in new conversations when `is_vacation` is true.
 * @param url The URL string for this shop.
 * @param imageUrl760x100 The URL string for this shop's banner image.
 * @param numFavorers The number of users who marked this shop a favorite.
 * @param languages A list of language strings for the shop's enrolled languages where the default shop language is the first element in the array.
 * @param iconUrlFullxfull The URL string for this shop's icon image.
 * @param isUsingStructuredPolicies When true, the shop accepted using structured policies.
 * @param hasOnboardedStructuredPolicies When true, the shop accepted OR declined after viewing structured policies onboarding.
 * @param includeDisputeFormLink When true, this shop's policies include a link to an EU online dispute form.
 * @param isDirectCheckoutOnboarded (**DEPRECATED: Replaced by _is_etsy_payments_onboarded_.) When true, the shop has onboarded onto Etsy Payments.
 * @param isEtsyPaymentsOnboarded When true, the shop has onboarded onto Etsy Payments.
 * @param isCalculatedEligible When true, the shop is eligible for calculated shipping profiles. (Only available in the US and Canada)
 * @param isOptedInToBuyerPromise When true, the shop opted in to buyer promise.
 * @param isShopUsBased When true, the shop is based in the US.
 * @param transactionSoldCount The total number of sales ([transactions](/documentation/reference#tag/Shop-Receipt-Transactions)) for this shop.
 * @param shippingFromCountryIso The country iso the shop is shipping from.
 * @param shopLocationCountryIso The country iso where the shop is located.
 * @param reviewCount Number of reviews of shop listings in the past year.
 * @param reviewAverage Average rating based on reviews of shop listings in the past year.
 */
@Serializable

data class Shop (

    /* The unique positive non-zero numeric ID for an Etsy Shop. */
    @SerialName(value = "shop_id") val shopId: kotlin.Long? = null,

    /* The numeric user ID of the [user](/documentation/reference#tag/User) who owns this shop. */
    @SerialName(value = "user_id") val userId: kotlin.Long? = null,

    /* The shop's name string. */
    @SerialName(value = "shop_name") val shopName: kotlin.String? = null,

    /* The date and time this shop was created, in epoch seconds. */
    @SerialName(value = "create_date") val createDate: kotlin.Int? = null,

    /* The date and time this shop was created, in epoch seconds. */
    @SerialName(value = "created_timestamp") val createdTimestamp: kotlin.Int? = null,

    /* A brief heading string for the shop's main page. */
    @SerialName(value = "title") val title: kotlin.String? = null,

    /* An announcement string to buyers that displays on the shop's homepage. */
    @SerialName(value = "announcement") val announcement: kotlin.String? = null,

    /* The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default. */
    @SerialName(value = "currency_code") val currencyCode: kotlin.String? = null,

    /* When true, this shop is not accepting purchases. */
    @SerialName(value = "is_vacation") val isVacation: kotlin.Boolean? = null,

    /* The shop's message string displayed when `is_vacation` is true. */
    @SerialName(value = "vacation_message") val vacationMessage: kotlin.String? = null,

    /* A message string sent to users who complete a purchase from this shop. */
    @SerialName(value = "sale_message") val saleMessage: kotlin.String? = null,

    /* A message string sent to users who purchase a digital item from this shop. */
    @SerialName(value = "digital_sale_message") val digitalSaleMessage: kotlin.String? = null,

    /* The date and time of the last update to the shop, in epoch seconds. */
    @SerialName(value = "update_date") val updateDate: kotlin.Int? = null,

    /* The date and time of the last update to the shop, in epoch seconds. */
    @SerialName(value = "updated_timestamp") val updatedTimestamp: kotlin.Int? = null,

    /* The number of active listings in the shop. */
    @SerialName(value = "listing_active_count") val listingActiveCount: kotlin.Int? = null,

    /* The number of digital listings in the shop. */
    @SerialName(value = "digital_listing_count") val digitalListingCount: kotlin.Int? = null,

    /* The shop owner's login name string. */
    @SerialName(value = "login_name") val loginName: kotlin.String? = null,

    /* When true, the shop accepts customization requests. */
    @SerialName(value = "accepts_custom_requests") val acceptsCustomRequests: kotlin.Boolean? = null,

    /* The shop's policy welcome string (may be blank). */
    @SerialName(value = "policy_welcome") val policyWelcome: kotlin.String? = null,

    /* The shop's payment policy string (may be blank). */
    @SerialName(value = "policy_payment") val policyPayment: kotlin.String? = null,

    /* The shop's shipping policy string (may be blank). */
    @SerialName(value = "policy_shipping") val policyShipping: kotlin.String? = null,

    /* The shop's refund policy string (may be blank). */
    @SerialName(value = "policy_refunds") val policyRefunds: kotlin.String? = null,

    /* The shop's additional policies string (may be blank). */
    @SerialName(value = "policy_additional") val policyAdditional: kotlin.String? = null,

    /* The shop's seller information string (may be blank). */
    @SerialName(value = "policy_seller_info") val policySellerInfo: kotlin.String? = null,

    /* The date and time of the last update to the shop's policies, in epoch seconds. */
    @SerialName(value = "policy_update_date") val policyUpdateDate: kotlin.Int? = null,

    /* When true, EU receipts display private info. */
    @SerialName(value = "policy_has_private_receipt_info") val policyHasPrivateReceiptInfo: kotlin.Boolean? = null,

    /* When true, the shop displays additional unstructured policy fields. */
    @SerialName(value = "has_unstructured_policies") val hasUnstructuredPolicies: kotlin.Boolean? = null,

    /* The shop's privacy policy string (may be blank). */
    @SerialName(value = "policy_privacy") val policyPrivacy: kotlin.String? = null,

    /* The shop's automatic reply string displayed in new conversations when `is_vacation` is true. */
    @SerialName(value = "vacation_autoreply") val vacationAutoreply: kotlin.String? = null,

    /* The URL string for this shop. */
    @SerialName(value = "url") val url: kotlin.String? = null,

    /* The URL string for this shop's banner image. */
    @SerialName(value = "image_url_760x100") val imageUrl760x100: kotlin.String? = null,

    /* The number of users who marked this shop a favorite. */
    @SerialName(value = "num_favorers") val numFavorers: kotlin.Int? = null,

    /* A list of language strings for the shop's enrolled languages where the default shop language is the first element in the array. */
    @SerialName(value = "languages") val languages: kotlin.collections.List<kotlin.String>? = null,

    /* The URL string for this shop's icon image. */
    @SerialName(value = "icon_url_fullxfull") val iconUrlFullxfull: kotlin.String? = null,

    /* When true, the shop accepted using structured policies. */
    @SerialName(value = "is_using_structured_policies") val isUsingStructuredPolicies: kotlin.Boolean? = null,

    /* When true, the shop accepted OR declined after viewing structured policies onboarding. */
    @SerialName(value = "has_onboarded_structured_policies") val hasOnboardedStructuredPolicies: kotlin.Boolean? = null,

    /* When true, this shop's policies include a link to an EU online dispute form. */
    @SerialName(value = "include_dispute_form_link") val includeDisputeFormLink: kotlin.Boolean? = null,

    /* (**DEPRECATED: Replaced by _is_etsy_payments_onboarded_.) When true, the shop has onboarded onto Etsy Payments. */
    @SerialName(value = "is_direct_checkout_onboarded") val isDirectCheckoutOnboarded: kotlin.Boolean? = null,

    /* When true, the shop has onboarded onto Etsy Payments. */
    @SerialName(value = "is_etsy_payments_onboarded") val isEtsyPaymentsOnboarded: kotlin.Boolean? = null,

    /* When true, the shop is eligible for calculated shipping profiles. (Only available in the US and Canada) */
    @SerialName(value = "is_calculated_eligible") val isCalculatedEligible: kotlin.Boolean? = null,

    /* When true, the shop opted in to buyer promise. */
    @SerialName(value = "is_opted_in_to_buyer_promise") val isOptedInToBuyerPromise: kotlin.Boolean? = null,

    /* When true, the shop is based in the US. */
    @SerialName(value = "is_shop_us_based") val isShopUsBased: kotlin.Boolean? = null,

    /* The total number of sales ([transactions](/documentation/reference#tag/Shop-Receipt-Transactions)) for this shop. */
    @SerialName(value = "transaction_sold_count") val transactionSoldCount: kotlin.Int? = null,

    /* The country iso the shop is shipping from. */
    @SerialName(value = "shipping_from_country_iso") val shippingFromCountryIso: kotlin.String? = null,

    /* The country iso where the shop is located. */
    @SerialName(value = "shop_location_country_iso") val shopLocationCountryIso: kotlin.String? = null,

    /* Number of reviews of shop listings in the past year. */
    @SerialName(value = "review_count") val reviewCount: kotlin.Int? = null,

    /* Average rating based on reviews of shop listings in the past year. */
    @SerialName(value = "review_average") val reviewAverage: kotlin.Float? = null

) {


}

