/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.etsy.models

import com.etsy.models.Money
import com.etsy.models.ShopReceiptShipment
import com.etsy.models.ShopReceiptTransaction
import com.etsy.models.ShopRefund

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * The record of a purchase from a shop. Shop receipts display monetary values using the shop's currency.
 *
 * @param receiptId The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
 * @param receiptType The numeric value for the Etsy channel that serviced the purchase: 0 for Etsy.com, 1 for a Pattern shop.
 * @param sellerUserId The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
 * @param sellerEmail The email address string for the seller of the listing.
 * @param buyerUserId The numeric ID for the [user](/documentation/reference#tag/User) making the purchase.
 * @param buyerEmail The email address string for the buyer of the listing. It will be null if access hasn't been granted. Access is case-by-case and subject to approval.
 * @param name The name string for the recipient in the shipping address.
 * @param firstLine The first address line string for the recipient in the shipping address.
 * @param secondLine The optional second address line string for the recipient in the shipping address.
 * @param city The city string for the recipient in the shipping address.
 * @param state The state string for the recipient in the shipping address.
 * @param zip The zip code string (not necessarily a number) for the recipient in the shipping address.
 * @param status The current order status string. One of: `paid`, `completed`, `open`, `payment processing` or `canceled`.
 * @param formattedAddress The formatted shipping address string for the recipient in the shipping address.
 * @param countryIso The ISO-3166 alpha-2 country code string for the recipient in the shipping address.
 * @param paymentMethod The payment method string identifying purchaser's payment method, which must be one of: 'cc' (credit card), 'paypal', 'check', 'mo' (money order), 'bt' (bank transfer), 'other', 'ideal', 'sofort', 'apple_pay', 'google', 'android_pay', 'google_pay', 'klarna', 'k_pay_in_4' (klarna), 'k_pay_in_3' (klarna), or 'k_financing' (klarna).
 * @param paymentEmail The email address string for the email address to which to send payment confirmation
 * @param messageFromSeller An optional message string from the seller.
 * @param messageFromBuyer An optional message string from the buyer.
 * @param messageFromPayment The machine-generated acknowledgement string from the payment system.
 * @param isPaid When true, buyer paid for this purchase.
 * @param isShipped When true, seller shipped the products.
 * @param createTimestamp The receipt's creation time, in epoch seconds.
 * @param createdTimestamp The receipt's creation time, in epoch seconds.
 * @param updateTimestamp The time of the last update to the receipt, in epoch seconds.
 * @param updatedTimestamp The time of the last update to the receipt, in epoch seconds.
 * @param isGift When true, the buyer indicated this purchase is a gift.
 * @param giftMessage A gift message string the buyer requests delivered with the product.
 * @param giftSender The name of the person who sent the gift.
 * @param grandtotal A number equal to the total_price minus the coupon discount plus tax and shipping costs.
 * @param subtotal A number equal to the total_price minus coupon discounts. Does not included tax or shipping costs.
 * @param totalPrice A number equal to the sum of the individual listings' (price * quantity). Does not included tax or shipping costs.
 * @param totalShippingCost A number equal to the total shipping cost of the receipt.
 * @param totalTaxCost The total sales tax of the receipt.
 * @param totalVatCost A number equal to the total value-added tax (VAT) of the receipt.
 * @param discountAmt The numeric total discounted price for the receipt when using a discount (percent or fixed) coupon. Free shipping coupons are not included in this discount amount.
 * @param giftWrapPrice The numeric price of gift wrap for this receipt.
 * @param shipments A list of shipment statements for this receipt.
 * @param transactions Array of transactions for the receipt.
 * @param refunds Refunds for a given receipt.
 */
@Serializable

data class ShopReceipt (

    /* The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. */
    @SerialName(value = "receipt_id") val receiptId: kotlin.Long? = null,

    /* The numeric value for the Etsy channel that serviced the purchase: 0 for Etsy.com, 1 for a Pattern shop. */
    @SerialName(value = "receipt_type") val receiptType: kotlin.Int? = null,

    /* The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase. */
    @SerialName(value = "seller_user_id") val sellerUserId: kotlin.Long? = null,

    /* The email address string for the seller of the listing. */
    @SerialName(value = "seller_email") val sellerEmail: kotlin.String? = null,

    /* The numeric ID for the [user](/documentation/reference#tag/User) making the purchase. */
    @SerialName(value = "buyer_user_id") val buyerUserId: kotlin.Long? = null,

    /* The email address string for the buyer of the listing. It will be null if access hasn't been granted. Access is case-by-case and subject to approval. */
    @SerialName(value = "buyer_email") val buyerEmail: kotlin.String? = null,

    /* The name string for the recipient in the shipping address. */
    @SerialName(value = "name") val name: kotlin.String? = null,

    /* The first address line string for the recipient in the shipping address. */
    @SerialName(value = "first_line") val firstLine: kotlin.String? = null,

    /* The optional second address line string for the recipient in the shipping address. */
    @SerialName(value = "second_line") val secondLine: kotlin.String? = null,

    /* The city string for the recipient in the shipping address. */
    @SerialName(value = "city") val city: kotlin.String? = null,

    /* The state string for the recipient in the shipping address. */
    @SerialName(value = "state") val state: kotlin.String? = null,

    /* The zip code string (not necessarily a number) for the recipient in the shipping address. */
    @SerialName(value = "zip") val zip: kotlin.String? = null,

    /* The current order status string. One of: `paid`, `completed`, `open`, `payment processing` or `canceled`. */
    @SerialName(value = "status") val status: ShopReceipt.Status? = null,

    /* The formatted shipping address string for the recipient in the shipping address. */
    @SerialName(value = "formatted_address") val formattedAddress: kotlin.String? = null,

    /* The ISO-3166 alpha-2 country code string for the recipient in the shipping address. */
    @SerialName(value = "country_iso") val countryIso: kotlin.String? = null,

    /* The payment method string identifying purchaser's payment method, which must be one of: 'cc' (credit card), 'paypal', 'check', 'mo' (money order), 'bt' (bank transfer), 'other', 'ideal', 'sofort', 'apple_pay', 'google', 'android_pay', 'google_pay', 'klarna', 'k_pay_in_4' (klarna), 'k_pay_in_3' (klarna), or 'k_financing' (klarna). */
    @SerialName(value = "payment_method") val paymentMethod: kotlin.String? = null,

    /* The email address string for the email address to which to send payment confirmation */
    @SerialName(value = "payment_email") val paymentEmail: kotlin.String? = null,

    /* An optional message string from the seller. */
    @SerialName(value = "message_from_seller") val messageFromSeller: kotlin.String? = null,

    /* An optional message string from the buyer. */
    @SerialName(value = "message_from_buyer") val messageFromBuyer: kotlin.String? = null,

    /* The machine-generated acknowledgement string from the payment system. */
    @SerialName(value = "message_from_payment") val messageFromPayment: kotlin.String? = null,

    /* When true, buyer paid for this purchase. */
    @SerialName(value = "is_paid") val isPaid: kotlin.Boolean? = null,

    /* When true, seller shipped the products. */
    @SerialName(value = "is_shipped") val isShipped: kotlin.Boolean? = null,

    /* The receipt's creation time, in epoch seconds. */
    @SerialName(value = "create_timestamp") val createTimestamp: kotlin.Int? = null,

    /* The receipt's creation time, in epoch seconds. */
    @SerialName(value = "created_timestamp") val createdTimestamp: kotlin.Int? = null,

    /* The time of the last update to the receipt, in epoch seconds. */
    @SerialName(value = "update_timestamp") val updateTimestamp: kotlin.Int? = null,

    /* The time of the last update to the receipt, in epoch seconds. */
    @SerialName(value = "updated_timestamp") val updatedTimestamp: kotlin.Int? = null,

    /* When true, the buyer indicated this purchase is a gift. */
    @SerialName(value = "is_gift") val isGift: kotlin.Boolean? = null,

    /* A gift message string the buyer requests delivered with the product. */
    @SerialName(value = "gift_message") val giftMessage: kotlin.String? = null,

    /* The name of the person who sent the gift. */
    @SerialName(value = "gift_sender") val giftSender: kotlin.String? = null,

    /* A number equal to the total_price minus the coupon discount plus tax and shipping costs. */
    @SerialName(value = "grandtotal") val grandtotal: Money? = null,

    /* A number equal to the total_price minus coupon discounts. Does not included tax or shipping costs. */
    @SerialName(value = "subtotal") val subtotal: Money? = null,

    /* A number equal to the sum of the individual listings' (price * quantity). Does not included tax or shipping costs. */
    @SerialName(value = "total_price") val totalPrice: Money? = null,

    /* A number equal to the total shipping cost of the receipt. */
    @SerialName(value = "total_shipping_cost") val totalShippingCost: Money? = null,

    /* The total sales tax of the receipt. */
    @SerialName(value = "total_tax_cost") val totalTaxCost: Money? = null,

    /* A number equal to the total value-added tax (VAT) of the receipt. */
    @SerialName(value = "total_vat_cost") val totalVatCost: Money? = null,

    /* The numeric total discounted price for the receipt when using a discount (percent or fixed) coupon. Free shipping coupons are not included in this discount amount. */
    @SerialName(value = "discount_amt") val discountAmt: Money? = null,

    /* The numeric price of gift wrap for this receipt. */
    @SerialName(value = "gift_wrap_price") val giftWrapPrice: Money? = null,

    /* A list of shipment statements for this receipt. */
    @SerialName(value = "shipments") val shipments: kotlin.collections.List<ShopReceiptShipment>? = null,

    /* Array of transactions for the receipt. */
    @SerialName(value = "transactions") val transactions: kotlin.collections.List<ShopReceiptTransaction>? = null,

    /* Refunds for a given receipt. */
    @SerialName(value = "refunds") val refunds: kotlin.collections.List<ShopRefund>? = null

) {

    /**
     * The current order status string. One of: `paid`, `completed`, `open`, `payment processing` or `canceled`.
     *
     * Values: paid,completed,`open`,payment_processing,canceled,fully_refunded,partially_refunded
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "paid") paid("paid"),
        @SerialName(value = "completed") completed("completed"),
        @SerialName(value = "open") `open`("open"),
        @SerialName(value = "payment processing") payment_processing("payment processing"),
        @SerialName(value = "canceled") canceled("canceled"),
        @SerialName(value = "fully refunded") fully_refunded("fully refunded"),
        @SerialName(value = "partially refunded") partially_refunded("partially refunded");
    }

}

