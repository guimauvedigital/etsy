/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.etsy.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.etsy.models.ListingImage

class ListingImageTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ListingImage
        //val modelInstance = ListingImage()

        // to test the property `listingId` - The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
        should("test listingId") {
            // uncomment below to test the property
            //modelInstance.listingId shouldBe ("TODO")
        }

        // to test the property `listingImageId` - The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
        should("test listingImageId") {
            // uncomment below to test the property
            //modelInstance.listingImageId shouldBe ("TODO")
        }

        // to test the property `hexCode` - The webhex string for the image's average color, in webhex notation.
        should("test hexCode") {
            // uncomment below to test the property
            //modelInstance.hexCode shouldBe ("TODO")
        }

        // to test the property `red` - The numeric red value equal to the image's average red value, from 0-255 (RGB color).
        should("test red") {
            // uncomment below to test the property
            //modelInstance.red shouldBe ("TODO")
        }

        // to test the property `green` - The numeric red value equal to the image's average red value, from 0-255 (RGB color).
        should("test green") {
            // uncomment below to test the property
            //modelInstance.green shouldBe ("TODO")
        }

        // to test the property `blue` - The numeric red value equal to the image's average red value, from 0-255 (RGB color).
        should("test blue") {
            // uncomment below to test the property
            //modelInstance.blue shouldBe ("TODO")
        }

        // to test the property `hue` - The numeric hue equal to the image's average hue, from 0-360 (HSV color).
        should("test hue") {
            // uncomment below to test the property
            //modelInstance.hue shouldBe ("TODO")
        }

        // to test the property `saturation` - The numeric saturation equal to the image's average saturation, from 0-100 (HSV color).
        should("test saturation") {
            // uncomment below to test the property
            //modelInstance.saturation shouldBe ("TODO")
        }

        // to test the property `brightness` - The numeric brightness equal to the image's average brightness, from 0-100 (HSV color).
        should("test brightness") {
            // uncomment below to test the property
            //modelInstance.brightness shouldBe ("TODO")
        }

        // to test the property `isBlackAndWhite` - When true, the image is in black & white.
        should("test isBlackAndWhite") {
            // uncomment below to test the property
            //modelInstance.isBlackAndWhite shouldBe ("TODO")
        }

        // to test the property `creationTsz` - The listing image's creation time, in epoch seconds.
        should("test creationTsz") {
            // uncomment below to test the property
            //modelInstance.creationTsz shouldBe ("TODO")
        }

        // to test the property `createdTimestamp` - The listing image's creation time, in epoch seconds.
        should("test createdTimestamp") {
            // uncomment below to test the property
            //modelInstance.createdTimestamp shouldBe ("TODO")
        }

        // to test the property `rank` - The positive non-zero numeric position in the images displayed in a listing, with rank 1 images appearing in the left-most position in a listing.
        should("test rank") {
            // uncomment below to test the property
            //modelInstance.rank shouldBe ("TODO")
        }

        // to test the property `url75x75` - The url string for a 75x75 pixel thumbnail of the image.
        should("test url75x75") {
            // uncomment below to test the property
            //modelInstance.url75x75 shouldBe ("TODO")
        }

        // to test the property `url170x135` - The url string for a 170x135 pixel thumbnail of the image.
        should("test url170x135") {
            // uncomment below to test the property
            //modelInstance.url170x135 shouldBe ("TODO")
        }

        // to test the property `url570xN` - The url string for a thumbnail of the image, no more than 570 pixels wide with variable height.
        should("test url570xN") {
            // uncomment below to test the property
            //modelInstance.url570xN shouldBe ("TODO")
        }

        // to test the property `urlFullxfull` - The url string for the full-size image, up to 3000 pixels in each dimension.
        should("test urlFullxfull") {
            // uncomment below to test the property
            //modelInstance.urlFullxfull shouldBe ("TODO")
        }

        // to test the property `fullHeight` - The numeric height, measured in pixels, of the full-sized image referenced in url_fullxfull.
        should("test fullHeight") {
            // uncomment below to test the property
            //modelInstance.fullHeight shouldBe ("TODO")
        }

        // to test the property `fullWidth` - The numeric width, measured in pixels, of the full-sized image referenced in url_fullxfull.
        should("test fullWidth") {
            // uncomment below to test the property
            //modelInstance.fullWidth shouldBe ("TODO")
        }

        // to test the property `altText` - Alt text for the listing image. Max length 500 characters.
        should("test altText") {
            // uncomment below to test the property
            //modelInstance.altText shouldBe ("TODO")
        }

    }
}
