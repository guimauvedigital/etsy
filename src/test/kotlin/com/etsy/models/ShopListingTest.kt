/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.etsy.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.etsy.models.ShopListing
import com.etsy.models.Money

class ShopListingTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ShopListing
        //val modelInstance = ShopListing()

        // to test the property `listingId` - The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
        should("test listingId") {
            // uncomment below to test the property
            //modelInstance.listingId shouldBe ("TODO")
        }

        // to test the property `userId` - The numeric ID for the [user](/documentation/reference#tag/User) posting the listing.
        should("test userId") {
            // uncomment below to test the property
            //modelInstance.userId shouldBe ("TODO")
        }

        // to test the property `shopId` - The unique positive non-zero numeric ID for an Etsy Shop.
        should("test shopId") {
            // uncomment below to test the property
            //modelInstance.shopId shouldBe ("TODO")
        }

        // to test the property `title` - The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\p{L}\\p{Nd}\\p{P}\\p{Sm}\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
        should("test title") {
            // uncomment below to test the property
            //modelInstance.title shouldBe ("TODO")
        }

        // to test the property `description` - A description string of the product for sale in the listing.
        should("test description") {
            // uncomment below to test the property
            //modelInstance.description shouldBe ("TODO")
        }

        // to test the property `state` - When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
        should("test state") {
            // uncomment below to test the property
            //modelInstance.state shouldBe ("TODO")
        }

        // to test the property `creationTimestamp` - The listing's creation time, in epoch seconds.
        should("test creationTimestamp") {
            // uncomment below to test the property
            //modelInstance.creationTimestamp shouldBe ("TODO")
        }

        // to test the property `createdTimestamp` - The listing's creation time, in epoch seconds.
        should("test createdTimestamp") {
            // uncomment below to test the property
            //modelInstance.createdTimestamp shouldBe ("TODO")
        }

        // to test the property `endingTimestamp` - The listing's expiration time, in epoch seconds.
        should("test endingTimestamp") {
            // uncomment below to test the property
            //modelInstance.endingTimestamp shouldBe ("TODO")
        }

        // to test the property `originalCreationTimestamp` - The listing's creation time, in epoch seconds.
        should("test originalCreationTimestamp") {
            // uncomment below to test the property
            //modelInstance.originalCreationTimestamp shouldBe ("TODO")
        }

        // to test the property `lastModifiedTimestamp` - The time of the last update to the listing, in epoch seconds.
        should("test lastModifiedTimestamp") {
            // uncomment below to test the property
            //modelInstance.lastModifiedTimestamp shouldBe ("TODO")
        }

        // to test the property `updatedTimestamp` - The time of the last update to the listing, in epoch seconds.
        should("test updatedTimestamp") {
            // uncomment below to test the property
            //modelInstance.updatedTimestamp shouldBe ("TODO")
        }

        // to test the property `stateTimestamp` - The date and time of the last state change of this listing.
        should("test stateTimestamp") {
            // uncomment below to test the property
            //modelInstance.stateTimestamp shouldBe ("TODO")
        }

        // to test the property `quantity` - The positive non-zero number of products available for purchase in the listing. Note: The listing quantity is the sum of available offering quantities. You can request the quantities for individual offerings from the ListingInventory resource using the [getListingInventory](/documentation/reference#operation/getListingInventory) endpoint.
        should("test quantity") {
            // uncomment below to test the property
            //modelInstance.quantity shouldBe ("TODO")
        }

        // to test the property `shopSectionId` - The numeric ID of a section in a specific Etsy shop.
        should("test shopSectionId") {
            // uncomment below to test the property
            //modelInstance.shopSectionId shouldBe ("TODO")
        }

        // to test the property `featuredRank` - The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop's home page.
        should("test featuredRank") {
            // uncomment below to test the property
            //modelInstance.featuredRank shouldBe ("TODO")
        }

        // to test the property `url` - The full URL to the listing's page on Etsy.
        should("test url") {
            // uncomment below to test the property
            //modelInstance.url shouldBe ("TODO")
        }

        // to test the property `numFavorers` - The number of users who marked this Listing a favorite.
        should("test numFavorers") {
            // uncomment below to test the property
            //modelInstance.numFavorers shouldBe ("TODO")
        }

        // to test the property `nonTaxable` - When true, applicable [shop](/documentation/reference#tag/Shop) tax rates do not apply to this listing at checkout.
        should("test nonTaxable") {
            // uncomment below to test the property
            //modelInstance.nonTaxable shouldBe ("TODO")
        }

        // to test the property `isTaxable` - When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
        should("test isTaxable") {
            // uncomment below to test the property
            //modelInstance.isTaxable shouldBe ("TODO")
        }

        // to test the property `isCustomizable` - When true, a buyer may contact the seller for a customized order. The default value is true when a shop accepts custom orders. Does not apply to shops that do not accept custom orders.
        should("test isCustomizable") {
            // uncomment below to test the property
            //modelInstance.isCustomizable shouldBe ("TODO")
        }

        // to test the property `isPersonalizable` - When true, this listing is personalizable. The default value is null.
        should("test isPersonalizable") {
            // uncomment below to test the property
            //modelInstance.isPersonalizable shouldBe ("TODO")
        }

        // to test the property `personalizationIsRequired` - When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
        should("test personalizationIsRequired") {
            // uncomment below to test the property
            //modelInstance.personalizationIsRequired shouldBe ("TODO")
        }

        // to test the property `personalizationCharCountMax` - This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
        should("test personalizationCharCountMax") {
            // uncomment below to test the property
            //modelInstance.personalizationCharCountMax shouldBe ("TODO")
        }

        // to test the property `personalizationInstructions` - When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
        should("test personalizationInstructions") {
            // uncomment below to test the property
            //modelInstance.personalizationInstructions shouldBe ("TODO")
        }

        // to test the property `listingType` - An enumerated type string that indicates whether the listing is physical or a digital download.
        should("test listingType") {
            // uncomment below to test the property
            //modelInstance.listingType shouldBe ("TODO")
        }

        // to test the property `tags` - A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}\\-'™©®]/u) Default value is null.
        should("test tags") {
            // uncomment below to test the property
            //modelInstance.tags shouldBe ("TODO")
        }

        // to test the property `materials` - A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}]/u) Default value is null.
        should("test materials") {
            // uncomment below to test the property
            //modelInstance.materials shouldBe ("TODO")
        }

        // to test the property `shippingProfileId` - The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
        should("test shippingProfileId") {
            // uncomment below to test the property
            //modelInstance.shippingProfileId shouldBe ("TODO")
        }

        // to test the property `returnPolicyId` - The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
        should("test returnPolicyId") {
            // uncomment below to test the property
            //modelInstance.returnPolicyId shouldBe ("TODO")
        }

        // to test the property `processingMin` - The minimum number of days required to process this listing. Default value is null.
        should("test processingMin") {
            // uncomment below to test the property
            //modelInstance.processingMin shouldBe ("TODO")
        }

        // to test the property `processingMax` - The maximum number of days required to process this listing. Default value is null.
        should("test processingMax") {
            // uncomment below to test the property
            //modelInstance.processingMax shouldBe ("TODO")
        }

        // to test the property `whoMade` - An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
        should("test whoMade") {
            // uncomment below to test the property
            //modelInstance.whoMade shouldBe ("TODO")
        }

        // to test the property `whenMade` - An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
        should("test whenMade") {
            // uncomment below to test the property
            //modelInstance.whenMade shouldBe ("TODO")
        }

        // to test the property `isSupply` - When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
        should("test isSupply") {
            // uncomment below to test the property
            //modelInstance.isSupply shouldBe ("TODO")
        }

        // to test the property `itemWeight` - The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
        should("test itemWeight") {
            // uncomment below to test the property
            //modelInstance.itemWeight shouldBe ("TODO")
        }

        // to test the property `itemWeightUnit` - A string defining the units used to measure the weight of the product. Default value is null.
        should("test itemWeightUnit") {
            // uncomment below to test the property
            //modelInstance.itemWeightUnit shouldBe ("TODO")
        }

        // to test the property `itemLength` - The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        should("test itemLength") {
            // uncomment below to test the property
            //modelInstance.itemLength shouldBe ("TODO")
        }

        // to test the property `itemWidth` - The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        should("test itemWidth") {
            // uncomment below to test the property
            //modelInstance.itemWidth shouldBe ("TODO")
        }

        // to test the property `itemHeight` - The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
        should("test itemHeight") {
            // uncomment below to test the property
            //modelInstance.itemHeight shouldBe ("TODO")
        }

        // to test the property `itemDimensionsUnit` - A string defining the units used to measure the dimensions of the product. Default value is null.
        should("test itemDimensionsUnit") {
            // uncomment below to test the property
            //modelInstance.itemDimensionsUnit shouldBe ("TODO")
        }

        // to test the property `isPrivate` - When true, this is a private listing intended for a specific buyer and hidden from shop view.
        should("test isPrivate") {
            // uncomment below to test the property
            //modelInstance.isPrivate shouldBe ("TODO")
        }

        // to test the property `style` - An array of style strings for this listing, each of which is free-form text string such as \"Formal\", or \"Steampunk\". When creating or updating a listing, the listing may have up to two styles. Valid style strings contain only letters, numbers, and whitespace characters. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}]/u) Default value is null.
        should("test style") {
            // uncomment below to test the property
            //modelInstance.style shouldBe ("TODO")
        }

        // to test the property `fileData` - A string describing the files attached to a digital listing.
        should("test fileData") {
            // uncomment below to test the property
            //modelInstance.fileData shouldBe ("TODO")
        }

        // to test the property `hasVariations` - When true, the listing has variations.
        should("test hasVariations") {
            // uncomment below to test the property
            //modelInstance.hasVariations shouldBe ("TODO")
        }

        // to test the property `shouldAutoRenew` - When true, renews a listing for four months upon expiration.
        should("test shouldAutoRenew") {
            // uncomment below to test the property
            //modelInstance.shouldAutoRenew shouldBe ("TODO")
        }

        // to test the property `language` - The IETF language tag for the default language of the listing. Ex: `de`, `en`, `es`, `fr`, `it`, `ja`, `nl`, `pl`, `pt`, `ru`.
        should("test language") {
            // uncomment below to test the property
            //modelInstance.language shouldBe ("TODO")
        }

        // to test the property `price` - The positive non-zero price of the product. (Sold product listings are private) Note: The price is the minimum possible price. The [`getListingInventory`](/documentation/reference/#operation/getListingInventory) method requests exact prices for available offerings.
        should("test price") {
            // uncomment below to test the property
            //modelInstance.price shouldBe ("TODO")
        }

        // to test the property `taxonomyId` - The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
        should("test taxonomyId") {
            // uncomment below to test the property
            //modelInstance.taxonomyId shouldBe ("TODO")
        }

        // to test the property `readinessStateId` - The numeric ID of the [processing profile](/documentation/reference#operation/getShopReadinessStateDefinition) associated with the listing. Required when listing type is `physical`.
        should("test readinessStateId") {
            // uncomment below to test the property
            //modelInstance.readinessStateId shouldBe ("TODO")
        }

    }
}
