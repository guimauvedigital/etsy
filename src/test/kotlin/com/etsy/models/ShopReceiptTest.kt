/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.etsy.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.etsy.models.ShopReceipt
import com.etsy.models.Money
import com.etsy.models.ShopReceiptShipment
import com.etsy.models.ShopReceiptTransaction
import com.etsy.models.ShopRefund

class ShopReceiptTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ShopReceipt
        //val modelInstance = ShopReceipt()

        // to test the property `receiptId` - The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
        should("test receiptId") {
            // uncomment below to test the property
            //modelInstance.receiptId shouldBe ("TODO")
        }

        // to test the property `receiptType` - The numeric value for the Etsy channel that serviced the purchase: 0 for Etsy.com, 1 for a Pattern shop.
        should("test receiptType") {
            // uncomment below to test the property
            //modelInstance.receiptType shouldBe ("TODO")
        }

        // to test the property `sellerUserId` - The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
        should("test sellerUserId") {
            // uncomment below to test the property
            //modelInstance.sellerUserId shouldBe ("TODO")
        }

        // to test the property `sellerEmail` - The email address string for the seller of the listing.
        should("test sellerEmail") {
            // uncomment below to test the property
            //modelInstance.sellerEmail shouldBe ("TODO")
        }

        // to test the property `buyerUserId` - The numeric ID for the [user](/documentation/reference#tag/User) making the purchase.
        should("test buyerUserId") {
            // uncomment below to test the property
            //modelInstance.buyerUserId shouldBe ("TODO")
        }

        // to test the property `buyerEmail` - The email address string for the buyer of the listing. It will be null if access hasn't been granted. Access is case-by-case and subject to approval.
        should("test buyerEmail") {
            // uncomment below to test the property
            //modelInstance.buyerEmail shouldBe ("TODO")
        }

        // to test the property `name` - The name string for the recipient in the shipping address.
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `firstLine` - The first address line string for the recipient in the shipping address.
        should("test firstLine") {
            // uncomment below to test the property
            //modelInstance.firstLine shouldBe ("TODO")
        }

        // to test the property `secondLine` - The optional second address line string for the recipient in the shipping address.
        should("test secondLine") {
            // uncomment below to test the property
            //modelInstance.secondLine shouldBe ("TODO")
        }

        // to test the property `city` - The city string for the recipient in the shipping address.
        should("test city") {
            // uncomment below to test the property
            //modelInstance.city shouldBe ("TODO")
        }

        // to test the property `state` - The state string for the recipient in the shipping address.
        should("test state") {
            // uncomment below to test the property
            //modelInstance.state shouldBe ("TODO")
        }

        // to test the property `zip` - The zip code string (not necessarily a number) for the recipient in the shipping address.
        should("test zip") {
            // uncomment below to test the property
            //modelInstance.zip shouldBe ("TODO")
        }

        // to test the property `status` - The current order status string. One of: `paid`, `completed`, `open`, `payment processing` or `canceled`.
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `formattedAddress` - The formatted shipping address string for the recipient in the shipping address.
        should("test formattedAddress") {
            // uncomment below to test the property
            //modelInstance.formattedAddress shouldBe ("TODO")
        }

        // to test the property `countryIso` - The ISO-3166 alpha-2 country code string for the recipient in the shipping address.
        should("test countryIso") {
            // uncomment below to test the property
            //modelInstance.countryIso shouldBe ("TODO")
        }

        // to test the property `paymentMethod` - The payment method string identifying purchaser's payment method, which must be one of: 'cc' (credit card), 'paypal', 'check', 'mo' (money order), 'bt' (bank transfer), 'other', 'ideal', 'sofort', 'apple_pay', 'google', 'android_pay', 'google_pay', 'klarna', 'k_pay_in_4' (klarna), 'k_pay_in_3' (klarna), or 'k_financing' (klarna).
        should("test paymentMethod") {
            // uncomment below to test the property
            //modelInstance.paymentMethod shouldBe ("TODO")
        }

        // to test the property `paymentEmail` - The email address string for the email address to which to send payment confirmation
        should("test paymentEmail") {
            // uncomment below to test the property
            //modelInstance.paymentEmail shouldBe ("TODO")
        }

        // to test the property `messageFromSeller` - An optional message string from the seller.
        should("test messageFromSeller") {
            // uncomment below to test the property
            //modelInstance.messageFromSeller shouldBe ("TODO")
        }

        // to test the property `messageFromBuyer` - An optional message string from the buyer.
        should("test messageFromBuyer") {
            // uncomment below to test the property
            //modelInstance.messageFromBuyer shouldBe ("TODO")
        }

        // to test the property `messageFromPayment` - The machine-generated acknowledgement string from the payment system.
        should("test messageFromPayment") {
            // uncomment below to test the property
            //modelInstance.messageFromPayment shouldBe ("TODO")
        }

        // to test the property `isPaid` - When true, buyer paid for this purchase.
        should("test isPaid") {
            // uncomment below to test the property
            //modelInstance.isPaid shouldBe ("TODO")
        }

        // to test the property `isShipped` - When true, seller shipped the products.
        should("test isShipped") {
            // uncomment below to test the property
            //modelInstance.isShipped shouldBe ("TODO")
        }

        // to test the property `createTimestamp` - The receipt's creation time, in epoch seconds.
        should("test createTimestamp") {
            // uncomment below to test the property
            //modelInstance.createTimestamp shouldBe ("TODO")
        }

        // to test the property `createdTimestamp` - The receipt's creation time, in epoch seconds.
        should("test createdTimestamp") {
            // uncomment below to test the property
            //modelInstance.createdTimestamp shouldBe ("TODO")
        }

        // to test the property `updateTimestamp` - The time of the last update to the receipt, in epoch seconds.
        should("test updateTimestamp") {
            // uncomment below to test the property
            //modelInstance.updateTimestamp shouldBe ("TODO")
        }

        // to test the property `updatedTimestamp` - The time of the last update to the receipt, in epoch seconds.
        should("test updatedTimestamp") {
            // uncomment below to test the property
            //modelInstance.updatedTimestamp shouldBe ("TODO")
        }

        // to test the property `isGift` - When true, the buyer indicated this purchase is a gift.
        should("test isGift") {
            // uncomment below to test the property
            //modelInstance.isGift shouldBe ("TODO")
        }

        // to test the property `giftMessage` - A gift message string the buyer requests delivered with the product.
        should("test giftMessage") {
            // uncomment below to test the property
            //modelInstance.giftMessage shouldBe ("TODO")
        }

        // to test the property `giftSender` - The name of the person who sent the gift.
        should("test giftSender") {
            // uncomment below to test the property
            //modelInstance.giftSender shouldBe ("TODO")
        }

        // to test the property `grandtotal` - A number equal to the total_price minus the coupon discount plus tax and shipping costs.
        should("test grandtotal") {
            // uncomment below to test the property
            //modelInstance.grandtotal shouldBe ("TODO")
        }

        // to test the property `subtotal` - A number equal to the total_price minus coupon discounts. Does not included tax or shipping costs.
        should("test subtotal") {
            // uncomment below to test the property
            //modelInstance.subtotal shouldBe ("TODO")
        }

        // to test the property `totalPrice` - A number equal to the sum of the individual listings' (price * quantity). Does not included tax or shipping costs.
        should("test totalPrice") {
            // uncomment below to test the property
            //modelInstance.totalPrice shouldBe ("TODO")
        }

        // to test the property `totalShippingCost` - A number equal to the total shipping cost of the receipt.
        should("test totalShippingCost") {
            // uncomment below to test the property
            //modelInstance.totalShippingCost shouldBe ("TODO")
        }

        // to test the property `totalTaxCost` - The total sales tax of the receipt.
        should("test totalTaxCost") {
            // uncomment below to test the property
            //modelInstance.totalTaxCost shouldBe ("TODO")
        }

        // to test the property `totalVatCost` - A number equal to the total value-added tax (VAT) of the receipt.
        should("test totalVatCost") {
            // uncomment below to test the property
            //modelInstance.totalVatCost shouldBe ("TODO")
        }

        // to test the property `discountAmt` - The numeric total discounted price for the receipt when using a discount (percent or fixed) coupon. Free shipping coupons are not included in this discount amount.
        should("test discountAmt") {
            // uncomment below to test the property
            //modelInstance.discountAmt shouldBe ("TODO")
        }

        // to test the property `giftWrapPrice` - The numeric price of gift wrap for this receipt.
        should("test giftWrapPrice") {
            // uncomment below to test the property
            //modelInstance.giftWrapPrice shouldBe ("TODO")
        }

        // to test the property `shipments` - A list of shipment statements for this receipt.
        should("test shipments") {
            // uncomment below to test the property
            //modelInstance.shipments shouldBe ("TODO")
        }

        // to test the property `transactions` - Array of transactions for the receipt.
        should("test transactions") {
            // uncomment below to test the property
            //modelInstance.transactions shouldBe ("TODO")
        }

        // to test the property `refunds` - Refunds for a given receipt.
        should("test refunds") {
            // uncomment below to test the property
            //modelInstance.refunds shouldBe ("TODO")
        }

    }
}
