/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.etsy.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.etsy.models.PaymentAdjustment
import com.etsy.models.PaymentAdjustmentItem

class PaymentAdjustmentTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of PaymentAdjustment
        //val modelInstance = PaymentAdjustment()

        // to test the property `paymentAdjustmentId` - The numeric ID for a payment adjustment.
        should("test paymentAdjustmentId") {
            // uncomment below to test the property
            //modelInstance.paymentAdjustmentId shouldBe ("TODO")
        }

        // to test the property `paymentId` - A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).
        should("test paymentId") {
            // uncomment below to test the property
            //modelInstance.paymentId shouldBe ("TODO")
        }

        // to test the property `status` - The status string of the payment adjustment.
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `isSuccess` - When true, the payment adjustment was or is likely to complete successfully.
        should("test isSuccess") {
            // uncomment below to test the property
            //modelInstance.isSuccess shouldBe ("TODO")
        }

        // to test the property `userId` - The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
        should("test userId") {
            // uncomment below to test the property
            //modelInstance.userId shouldBe ("TODO")
        }

        // to test the property `reasonCode` - A human-readable string describing the reason for the refund.
        should("test reasonCode") {
            // uncomment below to test the property
            //modelInstance.reasonCode shouldBe ("TODO")
        }

        // to test the property `totalAdjustmentAmount` - The total numeric amount of the refund in the payment currency.
        should("test totalAdjustmentAmount") {
            // uncomment below to test the property
            //modelInstance.totalAdjustmentAmount shouldBe ("TODO")
        }

        // to test the property `shopTotalAdjustmentAmount` - The numeric amount of the refund in the shop currency.
        should("test shopTotalAdjustmentAmount") {
            // uncomment below to test the property
            //modelInstance.shopTotalAdjustmentAmount shouldBe ("TODO")
        }

        // to test the property `buyerTotalAdjustmentAmount` - The numeric amount of the refund in the buyer currency.
        should("test buyerTotalAdjustmentAmount") {
            // uncomment below to test the property
            //modelInstance.buyerTotalAdjustmentAmount shouldBe ("TODO")
        }

        // to test the property `totalFeeAdjustmentAmount` - The numeric amount of card processing fees associated with a payment adjustment.
        should("test totalFeeAdjustmentAmount") {
            // uncomment below to test the property
            //modelInstance.totalFeeAdjustmentAmount shouldBe ("TODO")
        }

        // to test the property `createTimestamp` - The transaction's creation date and time, in epoch seconds.
        should("test createTimestamp") {
            // uncomment below to test the property
            //modelInstance.createTimestamp shouldBe ("TODO")
        }

        // to test the property `createdTimestamp` - The transaction's creation date and time, in epoch seconds.
        should("test createdTimestamp") {
            // uncomment below to test the property
            //modelInstance.createdTimestamp shouldBe ("TODO")
        }

        // to test the property `updateTimestamp` - The date and time of the last change to the payment adjustment in epoch seconds.
        should("test updateTimestamp") {
            // uncomment below to test the property
            //modelInstance.updateTimestamp shouldBe ("TODO")
        }

        // to test the property `updatedTimestamp` - The date and time of the last change to the payment adjustment in epoch seconds.
        should("test updatedTimestamp") {
            // uncomment below to test the property
            //modelInstance.updatedTimestamp shouldBe ("TODO")
        }

        // to test the property `paymentAdjustmentItems` - List of payment adjustment line items.
        should("test paymentAdjustmentItems") {
            // uncomment below to test the property
            //modelInstance.paymentAdjustmentItems shouldBe ("TODO")
        }

    }
}
