/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.etsy.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.etsy.models.PaymentAdjustmentItem

class PaymentAdjustmentItemTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of PaymentAdjustmentItem
        //val modelInstance = PaymentAdjustmentItem()

        // to test the property `paymentAdjustmentId` - The numeric ID for a payment adjustment.
        should("test paymentAdjustmentId") {
            // uncomment below to test the property
            //modelInstance.paymentAdjustmentId shouldBe ("TODO")
        }

        // to test the property `paymentAdjustmentItemId` - Unique ID for the adjustment line item.
        should("test paymentAdjustmentItemId") {
            // uncomment below to test the property
            //modelInstance.paymentAdjustmentItemId shouldBe ("TODO")
        }

        // to test the property `adjustmentType` - String indicating the type of adjustment for this line item.
        should("test adjustmentType") {
            // uncomment below to test the property
            //modelInstance.adjustmentType shouldBe ("TODO")
        }

        // to test the property `amount` - Integer value for the amount of the adjustment in original currency.
        should("test amount") {
            // uncomment below to test the property
            //modelInstance.amount shouldBe ("TODO")
        }

        // to test the property `shopAmount` - Integer value for the amount of the adjustment in currency for the shop.
        should("test shopAmount") {
            // uncomment below to test the property
            //modelInstance.shopAmount shouldBe ("TODO")
        }

        // to test the property `transactionId` - The unique numeric ID for a transaction.
        should("test transactionId") {
            // uncomment below to test the property
            //modelInstance.transactionId shouldBe ("TODO")
        }

        // to test the property `billPaymentId` - Unique ID for the bill payment adjustment.
        should("test billPaymentId") {
            // uncomment below to test the property
            //modelInstance.billPaymentId shouldBe ("TODO")
        }

        // to test the property `createdTimestamp` - The transaction's creation date and time, in epoch seconds.
        should("test createdTimestamp") {
            // uncomment below to test the property
            //modelInstance.createdTimestamp shouldBe ("TODO")
        }

        // to test the property `updatedTimestamp` - The update date and time the payment adjustment in epoch seconds.
        should("test updatedTimestamp") {
            // uncomment below to test the property
            //modelInstance.updatedTimestamp shouldBe ("TODO")
        }

    }
}
